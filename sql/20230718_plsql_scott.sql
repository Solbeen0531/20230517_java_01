SET SEVEROUTPUT ON;
SET SEVEROUTPUT OFF;

BEGIN
 DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
 DBMS_OUTPUT.PUT_LINE('HELLO WORLD2');
END;
/

DECLARE
 EMP_ID NUMBER;
 EMP_NAME VARCHAR2(30);
BEGIN
 EMP_ID := 888;
 EMP_NAME := '배서남';
 DBMS_OUTPUT.PUT_LINE('EMP_ID: '||EMP_ID);
 DBMS_OUTPUT.PUT_LINE('EMP_NAME: '||EMP_NAME);
END;
/

DECLARE
 EMP_ID EMPLOYEE.EMP_ID%TYPE;
 EMP_NAME EMPLOYEE.EMP_NAME%TYPE;
BEGIN
 SELECT EMP_ID, EMP_NAME
 INTO EMP_ID,EMP_NAME
 FROM EMPLOYEE
 WHERE EMP_ID = '&EMP_ID';
 DBMS_OUTPUT.PUT_LINE('EMP_ID: '||EMP_ID);
 DBMS_OUTPUT.PUT_LINE('EMP_NAME :'||EMP_NAME);
END;
/



DECLARE
 E EMPLOYEE%ROWTYPE;
BEGIN
 SELECT * INTO E
 FROM EMPLOYEE
 WHERE EMP_ID = '&EMP_ID';
 DBMS_OUTPUT.PUT_LINE('EMP_ID: '||E.EMP_ID);
 DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || E.EMP_NAME);
 DBMS_OUTPUT.PUT_LINE('EMP_NO : ' || E.EMP_NO);
 DBMS_OUTPUT.PUT_LINE('SALARY : ' || E.SALARY);
END;
/

DECLARE
 EMP_ID EMPLOYEE.EMP_ID%TYPE;
 EMP_NAME EMPLOYEE.EMP_NAME%TYPE;
 SALARY EMPLOYEE.SALARY%TYPE;
 BONUS EMPLOYEE.BONUS%TYPE;
BEGIN
 SELECT EMP_ID, EMP_NAME, SALARY, NVL(BONUS, 0) 
 INTO EMP_ID, EMP_NAME, SALARY, BONUS
 FROM EMPLOYEE
 WHERE EMP_ID = '&EMP_ID';
  DBMS_OUTPUT.PUT_LINE('사번 : ' || EMP_ID);
  DBMS_OUTPUT.PUT_LINE('이름 : ' || EMP_NAME);
  DBMS_OUTPUT.PUT_LINE('급여 : ' || SALARY);
 IF(BONUS = 0)
  THEN DBMS_OUTPUT.PUT_LINE('보너스를 지급받지 않는 사원입니다.');
  THEN DBMS_OUTPUT.PUT_LINE('보너스를 지급받지 않는 사원입니다.');
 END IF;
 DBMS_OUTPUT.PUT_LINE('보너스율 : ' || BONUS * 100 || '%');
END;
/

DECLARE
 EMP_ID EMPLOYEE.EMP_ID%TYPE;
 EMP_NAME EMPLOYEE.EMP_NAME%TYPE;
 DEPT_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
 NATIONAL_CODE LOCATION.NATIONAL_CODE%TYPE;
 TEAM VARCHAR2(20);
BEGIN
 SELECT EMP_ID, EMP_NAME, DEPT_TITLE, NATIONAL_CODE
 INTO EMP_ID, EMP_NAME, DEPT_TITLE, NATIONAL_CODE
 FROM EMPLOYEE E, DEPARTMENT D, LOCATION L
 WHERE E.DEPT_CODE = D. DEPT_ID
  AND D.LOCATION_ID = L.LOCAL_CODE
  AND EMP_ID = '&EMP_ID';
 IF(NATIONAL_CODE = 'KO') THEN TEAM := '국내팀';
 ELSE TEAM := '해외팀';
 END IF;
 DBMS_OUTPUT.PUT_LINE('사번 : ' || EMP_ID);
 DBMS_OUTPUT.PUT_LINE('이름 : ' || EMP_NAME);
 DBMS_OUTPUT.PUT_LINE('부서 : ' || DEPT_TITLE);
 DBMS_OUTPUT.PUT_LINE('소속 : ' || TEAM);
END;
/

DECLARE
 SCORE INT;
 GRADE VARCHAR2(2);
BEGIN
 SCORE := '&SCORE';
 IF SCORE >= 90 THEN GRADE := 'A';
 ELSIF SCORE >= 80 THEN GRADE := 'B';
 ELSIF SCORE >= 70 THEN GRADE := 'C';
 ELSIF SCORE >= 60 THEN GRADE := 'D';
 ELSE GRADE := 'F';
 END IF;
 DBMS_OUTPUT.PUT_LINE('당신의 점수는 ' || SCORE || '점이고, 
  학점은 ' || GRADE || '학점입니다.');
END;
/

DECLARE
    N NUMBER := 1;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE(N);
        N := N + 1;
        IF N > 5 THEN EXIT;
        END IF;
    END LOOP;
END;
/

BEGIN
    FOR N IN 1..5 LOOP
        DBMS_OUTPUT.PUT_LINE(N);
    END LOOP;
END;
/

BEGIN
    FOR N IN REVERSE 1..5 LOOP
        DBMS_OUTPUT.PUT_LINE(N);
    END LOOP;
END;
/

DECLARE
    N NUMBER := 1;
BEGIN
    WHILE N <= 5 LOOP
        DBMS_OUTPUT.PUT_LINE(N);
        N := N + 1;
    END LOOP;
END;
/

DECLARE
    DUP_EMPNO EXCEPTION;
    PRAGMA EXCEPTION_INIT(DUP_EMPNO, -00001);
BEGIN
    UPDATE EMPLOYEE 
    SET EMP_ID = '&사번'
    WHERE EMP_ID = 200;
EXCEPTION
    WHEN DUP_EMPNO
    THEN DBMS_OUTPUT.PUT_LINE('이미 존재하는 사번입니다.');
END;
/

SELECT * FROM USER_SOURCE;

--PROCEDURE 만들기
--사원번호를 전달받아서 이름,급여,업무를 반환함
CREATE OR REPLACE PROCEDURE PRO_EMP_ARG_TEST
 (ARG_EMPNO IN EMP.EMPNO%TYPE,ARG_ENAME OUT EMP.ENAME%TYPE)
IS

BEGIN
 dbms_output.put_line('ARG_EMPNO: '||ARG_EMPNO);
 ARG_ENAME :='아무거나 리턴되나 확인';
-- dbms_output.put_line('ARG_EMPNO: '||ARG_ENAME);
--PROCEDURE는 RETURN 없음
---대신 매개변수에 IN/OUT를 설정에서 OUT로 설정하면 그것이 RETURN됨
--FUNCTION에는 RETURN 있음
END;
/